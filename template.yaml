AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  schemavalidatexmltojson

  SAM Template for schemavalidatexmltojson project.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  RequestsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: S
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  PayloadBucket:
    Type: AWS::S3::Bucket
  SuccessJSONFilesBucket:
    Type: AWS::S3::Bucket
  FailedJSONFilesBucket:
    Type: AWS::S3::Bucket
  GetXmlFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: get_xml/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          PAYLOAD_BUCKET: !Ref PayloadBucket
          DYNAMODB_TABLE: !Ref RequestsTable
          EVENTBRIDGE: !Ref EventBus
          REGION: "us-east-1"
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - S3WritePolicy:
            BucketName: !Ref PayloadBucket
        - DynamoDBWritePolicy:
            TableName: !Ref RequestsTable
      Events:
        GetXml:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /xml
            Method: post
  SchemaValidatorLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: schemaValidatorLayer\lambda_layer.zip
      Description: "Lambda Layer with xmltodict,jsonschema,traitlets,attrs and pyrsistent packages."
      CompatibleRuntimes:
        - python3.9
  SchemaValidatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: schemavalidator/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref SchemaValidatorLayer
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: "us-east-1"
          PAYLOAD_BUCKET: !Ref PayloadBucket
          EVENTBRIDGE: !Ref EventBus
          DYNAMODB_TABLE: !Ref RequestsTable
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - S3ReadPolicy:
            BucketName: !Ref PayloadBucket
        - DynamoDBWritePolicy:
            TableName: !Ref RequestsTable
  SuccessValidationEventProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: successValidationEventProcess/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: "us-east-1"
          DYNAMODB_TABLE: !Ref RequestsTable
          VALIDATION_SUCCESS_BUCKET: !Ref SuccessJSONFilesBucket
          PAYLOAD_BUCKET: !Ref PayloadBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref SuccessJSONFilesBucket
        - S3ReadPolicy:
            BucketName: !Ref PayloadBucket
        - DynamoDBWritePolicy:
            TableName: !Ref RequestsTable
  FailedValidationEventProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: failedValidationEventProcess/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: "us-east-1"
          DYNAMODB_TABLE: !Ref RequestsTable
          VALIDATION_FAILED_BUCKET: !Ref FailedJSONFilesBucket
          PAYLOAD_BUCKET: !Ref PayloadBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref FailedJSONFilesBucket
        - S3ReadPolicy:
            BucketName: !Ref PayloadBucket
        - DynamoDBWritePolicy:
            TableName: !Ref RequestsTable
  EventBus:
    Type: AWS::Events::EventBus
    Properties: 
      Name: "schemavalidator_bus"
  EventRuleValidator: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Process XML Schema Validator."
      EventBusName: !GetAtt EventBus.Arn
      EventPattern: 
        source: 
          - "custom.get_xml_lambda"
        detail-type:
          - xmldata   
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt SchemaValidatorFunction.Arn
          Id: "SchemaValidatorFunction"
  EventRuleValidationSuccess: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Process Successful Schema Validation ."
      EventBusName: !GetAtt EventBus.Arn
      EventPattern: 
        source: 
          - "custom.schemavalidator_lambda"
        detail-type:
          - success   
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt SuccessValidationEventProcessFunction.Arn
          Id: "SuccessValidationEventProcessFunction"
  EventRuleValidationFailed: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Process Failed Schema Validation ."
      EventBusName: !GetAtt EventBus.Arn
      EventPattern: 
        source: 
          - "custom.schemavalidator_lambda"
        detail-type:
          - failed
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt FailedValidationEventProcessFunction.Arn
          Id: "FailedValidationEventProcessFunction"
  PermissionForEventsToInvokeSchemaValidatorLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref SchemaValidatorFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRuleValidator.Arn
  PermissionForEventsToInvokeSuccessValidationLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref SuccessValidationEventProcessFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRuleValidationSuccess.Arn
  PermissionForEventsToInvokeFailedValidationLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref FailedValidationEventProcessFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRuleValidationFailed.Arn
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetXmlApi:
    Description: "API Gateway endpoint URL for Prod stage for GetXml function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/xml/"
  GetXmlFunction:
    Description: "Get XML Lambda Function ARN"
    Value: !GetAtt GetXmlFunction.Arn
  GetXmlFunctionIamRole:
    Description: "Implicit IAM Role created for Get XML function"
    Value: !GetAtt GetXmlFunction.Arn
