AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  schemavalidatexmltojson

  SAM Template for schemavalidatexmltojson project.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  RequestsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: S
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  PayloadBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  SuccessJSONFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  SuccessJSONS3AccessPoint:
    Type: AWS::S3::AccessPoint
    Properties:
      Bucket: !Ref SuccessJSONFilesBucket
      Name: valide-jsons
  FailedJSONFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
  PutXmlFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: putXml/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          PAYLOAD_BUCKET: !Ref PayloadBucket
          DYNAMODB_TABLE: !Ref RequestsTable
          EVENTBRIDGE: !Ref EventBus
          REGION: "us-east-1"
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - S3WritePolicy:
            BucketName: !Ref PayloadBucket
        - DynamoDBWritePolicy:
            TableName: !Ref RequestsTable
      Events:
        GetXml:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /putxml
            Method: post
  XmlStatusFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: xmlStatus/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref RequestsTable
          REGION: "us-east-1"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RequestsTable
      Events:
        XmlStatus:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /xmlstatus
            Method: post
  SchemaValidatorLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: schemaValidatorLayer\lambda_layer.zip
      Description: "Lambda Layer with xmltodict,jsonschema,traitlets,attrs and pyrsistent packages."
      CompatibleRuntimes:
        - python3.9
  SchemaValidatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: schemavalidator/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref SchemaValidatorLayer
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: "us-east-1"
          PAYLOAD_BUCKET: !Ref PayloadBucket
          EVENTBRIDGE: !Ref EventBus
          DYNAMODB_TABLE: !Ref RequestsTable
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - S3ReadPolicy:
            BucketName: !Ref PayloadBucket
        - DynamoDBWritePolicy:
            TableName: !Ref RequestsTable
  SuccessValidationEventProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: successValidationEventProcess/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref SchemaValidatorLayer
      Environment:
        Variables:
          REGION: "us-east-1"
          DYNAMODB_TABLE: !Ref RequestsTable
          VALIDATION_SUCCESS_BUCKET: !Ref SuccessJSONFilesBucket
          PAYLOAD_BUCKET: !Ref PayloadBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref SuccessJSONFilesBucket
        - S3ReadPolicy:
            BucketName: !Ref PayloadBucket
        - DynamoDBWritePolicy:
            TableName: !Ref RequestsTable
  FailedValidationEventProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: failedValidationEventProcess/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref SchemaValidatorLayer
      Environment:
        Variables:
          REGION: "us-east-1"
          DYNAMODB_TABLE: !Ref RequestsTable
          VALIDATION_FAILED_BUCKET: !Ref FailedJSONFilesBucket
          PAYLOAD_BUCKET: !Ref PayloadBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref FailedJSONFilesBucket
        - S3ReadPolicy:
            BucketName: !Ref PayloadBucket
        - DynamoDBWritePolicy:
            TableName: !Ref RequestsTable
  EventBus:
    Type: AWS::Events::EventBus
    Properties: 
      Name: "schemavalidator_bus"
  EventRuleValidator: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Process XML Schema Validator."
      EventBusName: !GetAtt EventBus.Arn
      EventPattern: 
        source: 
          - "custom.get_xml_lambda"
        detail-type:
          - xmldata   
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt SchemaValidatorFunction.Arn
          Id: "SchemaValidatorFunction"
  EventRuleValidationSuccess: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Process Successful Schema Validation ."
      EventBusName: !GetAtt EventBus.Arn
      EventPattern: 
        source: 
          - "custom.schemavalidator_lambda"
        detail-type:
          - success   
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt SuccessValidationEventProcessFunction.Arn
          Id: "SuccessValidationEventProcessFunction"
  EventRuleValidationFailed: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Process Failed Schema Validation ."
      EventBusName: !GetAtt EventBus.Arn
      EventPattern: 
        source: 
          - "custom.schemavalidator_lambda"
        detail-type:
          - failed
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt FailedValidationEventProcessFunction.Arn
          Id: "FailedValidationEventProcessFunction"
  PermissionForEventsToInvokeSchemaValidatorLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref SchemaValidatorFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRuleValidator.Arn
  PermissionForEventsToInvokeSuccessValidationLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref SuccessValidationEventProcessFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRuleValidationSuccess.Arn
  PermissionForEventsToInvokeFailedValidationLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref FailedValidationEventProcessFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRuleValidationFailed.Arn
  ComprehendPiiRedactionS3ObjectLambda:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: 'arn:aws:serverlessrepo:us-east-1:839782855223:applications/ComprehendPiiRedactionS3ObjectLambda'
        SemanticVersion: 1.0.2
      Parameters: 
        
        # The minimum prediction confidence score above which PII classification and detection would be considered as final answer. Valid range (0.5 to 1.0).
        # ConfidenceThreshold: '0.5' # Uncomment to override default value
        # Number of threads to use for calling Comprehend's ContainsPiiEntities API. This controls the number of simultaneous calls that will be made from this Lambda.
        # ContainsPiiEntitiesThreadCount: '20' # Uncomment to override default value
        # Default language of the text to be processed. This code will be used for interacting with Comprehend.
        # DefaultLanguageCode: 'en' # Uncomment to override default value
        # Number of threads to use for calling Comprehend's DetectPiiEntities API. This controls the number of simultaneous calls that will be made from this Lambda.
        # DetectPiiEntitiesThreadCount: '8' # Uncomment to override default value
        # Default maximum document size (in bytes) that this function can process otherwise will throw exception for too large document size.
        DocumentMaxSize: '202400' # Uncomment to override default value
        # Maximum document size (in bytes) to be used for making calls to Comprehend's ContainsPiiEntities API.
        # DocumentMaxSizeContainsPiiEntities: '50000' # Uncomment to override default value
        # Maximum document size (in bytes) to be used for making calls to Comprehend's DetectPiiEntities API.
        # DocumentMaxSizeDetectPiiEntities: '5000' # Uncomment to override default value
        # Whether to support partial objects or not. Accessing partial object through http headers such byte-range can corrupt the object and/or affect PII detection accuracy.
        # IsPartialObjectSupported: 'false' # Uncomment to override default value
        # Log level for Lambda function logging, e.g., ERROR, INFO, DEBUG, etc.
        # LogLevel: 'INFO' # Uncomment to override default value
        # A character that replaces each character in the redacted PII entity.
        MaskCharacter: '*' # Uncomment to override default value
        # Specifies whether the PII entity is redacted with the mask character or the entity type. Valid values - REPLACE_WITH_PII_ENTITY_TYPE and MASK.
        MaskMode: 'MASK' # Uncomment to override default value
        # Maximum characters to overlap among segments of a document in case chunking is needed because of maximum document size limit.
        # MaxCharsOverlap: '200' # Uncomment to override default value
        # List of comma separated PII entity types to be considered for redaction. Refer Comprehend's documentation page for list of supported PII entity types.
        PiiEntityTypes: 'ALL' # Uncomment to override default value
        # True if publish metrics to Cloudwatch, false otherwise. See README.md for details on CloudWatch metrics.
        # PublishCloudWatchMetrics: 'true' # Uncomment to override default value
        # Number of tokens/words to overlap among segments of a document in case chunking is needed because of maximum document size limit.
        # SubsegmentOverlappingTokens: '20' # Uncomment to override default value
        # Handling logic for Unsupported files. Valid values are PASS and FAIL.
        # UnsupportedFileHandling: 'FAIL' # Uncomment to override default value
  ValidJsonLambdaAccessPoint:
    Type: AWS::S3ObjectLambda::AccessPoint
    Properties: 
       Name: valid-json-redaction
       ObjectLambdaConfiguration: 
          SupportingAccessPoint: !Sub 'arn:aws:s3:${AWS::Region}:${AWS::AccountId}:accesspoint/${SuccessJSONS3AccessPoint}'
          TransformationConfigurations: 
          - Actions: 
              - GetObject
            ContentTransformation: 
              AwsLambda:
                FunctionArn: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ComprehendPiiRedactionS3ObjectLambda.Outputs.PiiRedactionFunctionName}'
  JsonPIIRedacted:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getJsonPIIRedacted/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: "us-east-1"
          OBJECTLAMBDAS3ARN: !GetAtt ValidJsonLambdaAccessPoint.Arn
      Policies:
      - Statement:
          - Sid: ObjectLambdaAccess
            Effect: Allow
            Action:
            - 's3-object-lambda:Get*'
            - 's3-object-lambda:List*'
            Resource: !GetAtt ValidJsonLambdaAccessPoint.Arn
          - Sid: AllowStandardAccessPointAccess
            Effect: Allow
            Action:
            - 's3:Get*'
            - 's3:List*'
            Resource: !Sub '${SuccessJSONS3AccessPoint.Arn}/*'
            Condition:
              ForAnyValue:StringEquals:
                aws:CalledVia: "s3-object-lambda.amazonaws.com"
          - Sid: AllowLambdaInvocation
            Effect: Allow
            Action:
            - 'lambda:InvokeFunction'
            Resource: "*"                       
      Events:
        XmlStatus:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /getredacteddata
            Method: post
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetXmlApi:
    Description: "API Gateway endpoint URL for Prod stage for GetXml function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/putXml/"
  XmlStatusApi:
    Description: "API Gateway endpoint URL for Prod stage for XmlStatus function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/xmlstatus/"
  JsonPIIRedactedApi:
    Description: "API Gateway endpoint URL for Prod stage for XmlStatus function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getredacteddata/"
  ValidJsonAccessPointARN:
    Value:
      Fn::GetAtt:
      - SuccessJSONS3AccessPoint
      - Arn
    Description: ARN of the Valided JSONs Amazon S3 access point.
